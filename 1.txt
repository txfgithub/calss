还有bug
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <string.h>

    //void read();//读取职工工资数据函数
	void write();//保存职工工资数据函数
	void find();//查询职工工资数据函数
	void list();//浏览职工工资数据函数
	void modify();//修改职工工资数据函数
	void del();//删除职工工资数据函数
	void add();//增加职工工资数据函数
	void grsds();//定义计算职工工资数据函数

struct Employee //职工数据结构
{
	 char number[10];    //职员工号
    char name[10];    //职员姓名
    float gw_salary;    //岗位工资
    float xj_salary;    //薪级工资
    float subsidy;    //职务津贴
    float jx_salary;    //绩效工资
    float yf_salary;    //应发工资
    float tax;    //个人所得税
    float actual_wage;    //实发工资
    }zggz[100];
	int n = 0;	//全局变量n，用于记录写入结构体数据的总数

    void grsds(int m);    //声明计算职工工资数据函数


int main()
{   //read();
  int n,w1;

   do
   { system("cls");  
      printf("************* 职工工资管理系统 **************\n");
      printf("*            1-----查询                    *\n");
      printf("*            2-----添加              *\n");
      printf("*            3-----删除              *\n");
      printf("*            4-----修改             *\n");
      printf("*            5-----浏览                    *\n");
      printf("*            6-----保存                  *\n");
      printf("*            7-----退出                           *\n");
      printf("***************************************************\n");
  printf("       输入您的选择(1-7):[ ]\b\b");
  scanf("%d",&n);
  if(n<1||n>7)                                    //对选择的数字作判断
         {
            w1=1;
            printf("your choice is not between 1 and 7,Please input again:");
            getchar();
          }
         else    w1=0;
      } 
    while(w1==1);
  switch(n)
  {  
    case 1:find();   break;  
    case 2:add();   break;    
    case 3:del();   break;    
    case 4:modify();  break;    
    case 5:list();   break;      
	case 6:write();   break;   
    case 7:printf("\n×××××××谢谢，欢迎下次光临！×××××××\n\n");  

    default:exit(0);  //退出系统,exit(0)函数功能是退出程序。
  }
  return 0;
}

/*void read()
{
	FILE *fp;
	int i=0;
	if((fp=fopen("gz.dat","rb"))==NULL)
	{
		cout<<"无法打开文件"<<endl;
		exit(0);
	}
	else
	{
		do
		{
			fread(&zggz[i],sizeof(struct employee),1,fp);
			i++;
		}
		while(feof(fp)==0);
	}
	fclose(fp);
	return(i-1);
}*/
void write()    //保存职工工资数据函数
{
    FILE *fp = fopen("gx.dat","wb+");
    int i = 0;

    if((fp == NULL))    //打开当前目录下文件
    {
        printf("\n文件打开失败！");
        getch();
        exit(-1);
    }

	for(i = 0; i < n; i ++)
    {
        fwrite(&zggz[i], sizeof(zggz[i]), 1, fp);    //将数据写入二进制文件
        fprintf(fp, "\n");    //给写入文件的数据尾部加入换行符
    }

    fclose(fp);
    printf("\n文件保存完毕！");
    printf("\n共有%d条数据被写入二进制文件\n\n", n);
}

void find()    //查询职工工资数据函数
{
    char gonghao[10];
    int i;
	int flag = 1;

    printf("\n请输入所要查询的工号：");
    do{
        scanf("%s", gonghao);
        for(i = 0; i < n; i ++)
        {
            if(strcmp(gonghao, &zggz[i].number[10]) == 0)
            {
                printf("\n职员工号：%s\t\n姓名：%s\t\n岗位工资：%f\t", 
                        zggz[i].number, zggz[i].name, zggz[i].gw_salary);
                printf("\n薪级工资：%f\t\n职务津贴：%f\t\n绩效工资：%f\t", 
                        zggz[i].xj_salary, zggz[i].subsidy, zggz[i].jx_salary);
                printf("\n应发工资：%f\t\n个人所得税：%f\t\n实发工资：%f\t\n",
                        zggz[i].yf_salary, zggz[i].tax, zggz[i].actual_wage);
		    	flag = 0;
                break;
            }
        }
        if(i == n)
        {
            printf("\n无此工号职员信息\n");
	    	printf("\n请输入正确的工号：");
        }
    }while(flag);
}

void list()    //浏览职工工资数据函数
{
    char gonghao[10];
    int i, j;
	int flag = 1;

    do{
        printf("\n请输入所要浏览的工号：");
        scanf("%s", gonghao);
        for(i = 0; i < n; i ++)
        {
            if(strcmp(gonghao, &zggz[i].number[10]) == 0)
            {
                for(j = i; j < n; j ++)
                {
                    printf("\n职员工号：%s\t\n职员姓名：%s\t\n岗位工资：%f\t",
                            zggz[j].number, zggz[j].name, zggz[j].gw_salary);
                    printf("\n薪级工资：%f\t\n职务津贴：%f\t\n绩效工资：%f\t", 
                            zggz[j].xj_salary, zggz[j].subsidy, zggz[j].jx_salary);
                    printf("\n应发工资：%f\t\n个人所得税：%f\t\n实发工资：%f\t\n", 
                            zggz[j].yf_salary, zggz[j].tax, zggz[j].actual_wage);
                }
		    	flag = 0;
                break;
            }
        }
        if(i == n)
        {
            printf("\n无此工号职员信息\n");
        }
    }while(flag);
}

void modify()    //修改职工工资数据函数
{
    char gonghao[10];
    int i;
    int flag = 1;

    do
    {
        printf("\n请输入所要重新录入的职员工号：");
        scanf("%s", gonghao);
        for(i = 0; i < n; i ++)
        {
            if(strcmp(gonghao, &zggz[i].number[10]) == 0)
            {
                printf("\n请重新录入该职工数据：\n");
                /*
                printf("\n职员工号：");
                scanf("%s", zggz[i].number);
                */

                printf("\n职员姓名：");    //输入职员姓名
                scanf("%s", zggz[i].name);

                printf("\n岗位工资：");    //输入岗位工资
                scanf("%f", &zggz[i].gw_salary);

                printf("\n薪级工资：");    //输入薪级工资
                scanf("%f", &zggz[i].xj_salary);

				printf("\n职务津贴：");    //输入职务津贴
				scanf("%f", &zggz[i].subsidy);

				printf("\n绩效工资：");    //输入绩效工资
				scanf("%f", &zggz[i].jx_salary);

				zggz[i].yf_salary = zggz[i].gw_salary + zggz[i].xj_salary 
                        + zggz[i].subsidy + zggz[i].jx_salary;

                grsds(n);    //计算个人所得税

                zggz[n].actual_wage = zggz[n].yf_salary - zggz[n].tax;
            }
        }
    	if(i == n)
        {
            printf("\n无此工号职工信息\n");
        }
    }while(flag);
}

void del()    //删除职工工资数据函数
{
    char gonghao[10];
    int i, j;
	int flag = 1;

	do
    {
        printf("\n请输入所要删除的职员工号：");
        scanf("%s", gonghao);
        for(i = 0; i < n; i ++)
        {
            if(strcmp(gonghao, zggz[i].number) == 1)
            {
                for(j = i; j < n; j ++)
                {
                    zggz[j] = zggz[j+1];
                }
                n -= 1;
                break;
            }
        }
        if(i == n)    //查找后不存在工号
        {
            printf("\n无此工号职工信息\n");
		}
    }while(flag);
}

void add()    //添加职工工资数据函数
{
    char ch, s[10];
	int i;
	int flag = 0;

    printf("\n请输入职工基本信息：");
    for(; n < 100; n ++)
    {
        do
        {
            printf("\n职员工号：");    //输入职员工号
            scanf("%s", s);
            for(i = 0; i < n; i ++)
            {
                if(strcmp(s, &zggz[i].number[10]) == 0)
                {
                    printf("\n该职员工号已存在，请重新输入！\n");
                    flag = 1;
                    break;
                }
            }
            if(i == n)    //职员工号无重复，开始赋值
            {
                strcpy(s, zggz[n].number);
                flag = 0;
            }
        }while(flag);

        printf("\n职员姓名：");    //输入职员姓名
        scanf("%s", zggz[n].name);

        printf("\n岗位工资：");    //输入岗位工资
        scanf("%f", &zggz[n].gw_salary);

        printf("\n薪级工资：");    //输入薪级工资
        scanf("%f", &zggz[n].xj_salary);

        printf("\n职务津贴：");    //输入职务津贴
        scanf("%f", &zggz[n].subsidy);

        printf("\n绩效工资：");    //输入绩效工资
        scanf("%f", &zggz[n].jx_salary);

    	zggz[n].yf_salary = zggz[n].gw_salary + zggz[n].xj_salary
		    +zggz[n].subsidy + zggz[n].jx_salary;    //计算应发工资

        grsds(n);    //计算个人所得税

        zggz[n].actual_wage = zggz[n].yf_salary - zggz[n].tax;   //计算实发工资

        printf("\n是否结束输入？是：y 否：n");    //判断是否要结束输入
        scanf("%s", &ch);
        if(strcmp(&ch, "y") == 0)
        {
            break;
        }
        else if(strcmp(&ch, "n") == 0)
        {
            continue;
        }
    }
}

void grsds(int m)    //计算职工个人所得税函数
{
	double count, tax;
	int flag = 0;
	count = zggz[n].yf_salary;
	zggz[n].tax = 0;

    do
    {
        if(count < 500)
        {
	        tax = count * 0.05;
            flag = 0;
        }
        else if(count < 2000)
        {
            tax = (count - 500) * 0.1;
	    	count -= 500;
        }
        else if(count < 5000)
        {
    		tax = count - 2000 * 0.15;
	    	count -= 2000;
        }
        else if(count < 20000)
        {
    		tax = (count - 5000) * 0.2;
	    	count -= 5000;
        }
        else if(count < 40000)
        {
    		tax = (count - 20000) * 0.25;
	    	count -= 20000;
        }
        else if(count < 60000)
        {
    		tax = (count - 40000) * 0.3;
	    	count -= 40000;
        }
        else if(count < 80000)
        {
            tax = (count - 60000) * 0.35;
	    	count -= 60000;
        }
        else if(count < 10000)
        {
    		tax = (count - 80000) * 0.4;
	    	count -= 80000;
        }
        else
        {
            tax = (count - 100000) * 0.45;
	    	count -= 100000;
        }
        zggz[n].tax += tax;
    }while(flag);
}
